/*
*   char *c[] = { \"ENTER\", \"NEW\", \"POINT\", \"FIRST\" }; \n
*   char **cp[] = { c+3, c+2, c+1, c }; \nchar ***cpp = cp; \n \n
*   int main(void)\n{ \n\tprintf(\"%s\", **++cpp); \n\t
*   printf(\"%s\", *--*++cpp+3); \n\t
*   printf(\"%s\", *cpp[-2]+3); \n\t
*   printf(\"%s\\n\", cpp[-1][-1]+1); \n\treturn 0;\n}
*
*/
#include <stdio.h>


/**************************************************************************************
*  在定义字符指针数据时，添加const关键字的作用是指明该指针指向的是一个常量字符串，
*  即该指针所指向的字符串内容是不可修改的。使用const关键字可以帮助编译器进行静态检查，
*  防止意外地修改字符串内容，提高代码的可靠性和安全性。
***************************************************************************************/
int main(void)
{
	// 定义字符指针数组c，并初始化为四个字符串常量
	const char* c[] = { "ENTER", "NEW", "POINT", "FIRST" };

	// 定义字符指针指针数组cp，并初始化为指向c数组中元素的地址
	const char** cp[] = { c + 3, c + 2, c + 1, c };

	// 定义字符指针指针指针变量cpp，并初始化为cp数组的起始地址
	const char*** cpp = cp;

	// 输出第一个字符串：**++cpp 等同于 *(*++cpp)，即让cpp指向下一个指针，再获取指针指向的值
	printf("%s\n", **++cpp);

	// 输出第二个字符串：*--*++cpp+3 先让cpp指向下一个指针，再将指针指向的值向前偏移3个字符
	printf("%s\n", *-- * ++cpp + 3);

	// 输出第三个字符串：*cpp[-2]+3 先通过cpp[-2]获取cp数组中的第三个指针，再将指针指向的值向前偏移3个字符
	printf("%s\n", *cpp[-2] + 3);

	// 输出第四个字符串：cpp[-1][-1]+1 先通过cpp[-1][-1]获取cp数组中的第一个指针，再将指针指向的值向后偏移1个字符
	printf("%s\n", cpp[-1][-1] + 1);

	return 0;
}

